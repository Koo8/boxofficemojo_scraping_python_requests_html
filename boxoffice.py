'''This website doesn't have its own api, so I will use python requests library to grab the box office ranking
of different years and save them into respective file for analysis.
    Use requests_html HTML package instead of beautifulsoup for parsig HTML file
    Test first before coding : use python -i boxoffice.py in terminal to start interactive terminal, so that the 
newly defined variables can be called inside the terminal for testing purpose
    Use pandas to save data to csv file. It's easier than python built-in csv module
'''
import requests
import os.path
import pandas as pd
from requests_html import HTML

def create_file_path(year = 2022):
    url = f'https://www.boxofficemojo.com/year/world/{year}'
    # To get the current file's parent directory name
    dir_n = os.path.dirname(__file__)
    # To make a dir for dataset
    path = os.path.join(dir_n, 'data')
    os.makedirs(path, exist_ok=True)
    # assemble the file path in the same folder with year variable
    filepath = os.path.join(path, f'movie_{year}.csv')
    return filepath, url

# save html content to a file
def url_to_html(year, save = False):
    filepath, url = create_file_path(year)
    r = requests.get(url)
    if r.status_code == 200:
        html_text = r.text
        # if save:
        #     with open(filepath, 'w', encoding='utf-8') as f:
        #         f.write(html_text)
        return html_text, filepath
    return None

# html_content = url_to_file(2021)

def parse_and_extract_and_save(year):
    html_content, filepath = url_to_html(year)
    if html_content != None:
        scraped_html = HTML(html=html_content)
        table = scraped_html.find('#table', first=True)
        ## NOTE:initially there are 3 <table> within this <div id='table'> element, some of the <table> is from
        # javascript, so use interactive terminal to test out what is the real html<table>
        inner_table = table.find('table', first=True) #[<Element 'table' class=('a-bordered', 'a-horizontal-stripes', 'a-size-base', 'a-span12', 'mojo-body-table', 'mojo-table-annotated')>]
        # the actual html <table> element is the above, the other two are generated by javascript
        ## NOTE: to actually sees this html only in dev tool interface, use ctrl+shift+p to open the RUN command panel
        # search 'disable' to disable javascript. Then after refreshing the page, the dev tool Elements tab will only show HTML content. This time
        # we can see only one <table> element is shown
        rows = inner_table.find('tr')
        headers = rows[0].text.split('\n') #['Rank', 'Release Group', 'Worldwide', 'Domestic', '%', 'Foreign', '%']
        data = []
        for row in rows[1:]:
            td_s_in_each_row = [td.text for td in row.find('td')]
            data.append(td_s_in_each_row)

        df = pd.DataFrame(data, columns=headers)
        df.to_csv(filepath, index=False)


for year in range(2012, 2023):
    parse_and_extract_and_save(year)

